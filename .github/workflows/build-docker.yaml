name: Build and Push Docker Image

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: login to docker hub
        if: github.event_name == 'push'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      #! Using Docker Build Secrets:
      - name: Create temporary secret files
        run: |
          mkdir -p ./secrets
          echo "${{ secrets.SHOPIFY_STORE_DOMAIN }}" > ./secrets/shopify_domain.txt
          echo "${{ secrets.SHOPIFY_STOREFRONT_ACCESS_TOKEN }}" > ./secrets/shopify_token.txt

      - name: set up docker buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver-opts: image=moby/buildkit:latest
        # replace "latest" with stable version if needed

      - name: build and push docker image
        if: github.event_name == 'push'
        uses: docker/build-push-action@v6
        with:
          platforms: linux/amd64,linux/arm64
          push: true
          #! UPDATE TAG NAME BEFORE PUSHING CHANGES /firstimage:Vx
          tags: docker.io/${{ secrets.DOCKER_HUB_USERNAME }}/firstimage:V3.0

          #! Using Docker Build Secrets:
          build-args: |
            DOCKER_HUB_USERNAME=${{ secrets.DOCKER_HUB_USERNAME }}
          secrets: |
            shopify_domain=./secrets/shopify_domain.txt
            shopify_token=./secrets/shopify_token.txt
      - name: Clean up secret files
        if: always()
        run: rm -rf ./secrets

  # testing with selenium

  test:
    runs-on: ubuntu-latest
    needs: build # Ensures tests run after the build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create .env.local & .env file for CI
        run: |
          echo "SHOPIFY_STORE_DOMAIN=${{ secrets.SHOPIFY_STORE_DOMAIN }}" > .env.local 
          echo "SHOPIFY_STOREFRONT_ACCESS_TOKEN=${{ secrets.SHOPIFY_STOREFRONT_ACCESS_TOKEN }}" >> .env.local
          echo "DOCKER_HUB_USERNAME=${{ secrets.DOCKER_HUB_USERNAME }}" >> .env.local
          echo .env.local > .env

      # Using Docker Build Secrets:
      - name: Create secret files for build
        run: |
          mkdir -p ./secrets
          echo "${{ secrets.SHOPIFY_STORE_DOMAIN }}" > ./secrets/shopify_domain.txt
          echo "${{ secrets.SHOPIFY_STOREFRONT_ACCESS_TOKEN }}" > ./secrets/shopify_token.txt

      - name: Debug environment variables & secrets
        run: |
          echo "Checking .env.local file:"
          cat .env.local
          echo "Checking secrets:"
          cat ./secrets/shopify_domain.txt
          cat ./secrets/shopify_token.txt
          echo "Checking .env file:"
          cat .env

        # Show file without exposing secrets

      - name: Start Selenium + Build service
        run: docker compose -f docker-compose.test.yml up -d

      - name: Build and run tests
        env:
          SHOPIFY_STORE_DOMAIN: ${{ secrets.SHOPIFY_STORE_DOMAIN }}
          SHOPIFY_STOREFRONT_ACCESS_TOKEN: ${{ secrets.SHOPIFY_STOREFRONT_ACCESS_TOKEN }}
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
        run: |
          docker build -t web-test --secret id=shopify_domain,src=./secrets/shopify_domain.txt --secret id=shopify_token,src=./secrets/shopify_token.txt -f Dockerfile.test .
          docker run --rm --network=host \
            -e SHOPIFY_STORE_DOMAIN=$SHOPIFY_STORE_DOMAIN \
            -e SHOPIFY_STOREFRONT_ACCESS_TOKEN=$SHOPIFY_STOREFRONT_ACCESS_TOKEN \
            web-test

      - name: Stop Selenium services
        if: always()
        run: |
          docker compose down
          rm -rf ./secrets

  # buildx doesn't store under local docker daemon image storage
